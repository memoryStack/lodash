import _differenceBy from '../utils/differenceBy'

describe('_differenceBy(array, values, comparisonCriterionGenerator)', () => {

  test('calls passed criterion generator for each element in array and values arguments to generate a value which will be used for comparison', () => {
    const array = [{ 'x': 2 }, { 'x': 1 }]
    const values = [{ 'x': 1 }]
    const mockFn = jest.fn()
    _differenceBy(array, values, mockFn)

    expect(mockFn.mock.calls.length).toBe(3)
  })

  test('returns a new array after taking difference based on the comparison criterion generated by passsed function', () => {
    /*
      Note: the actual comparison happened like _difference([2, 1], [1]) with the help of comparison generator
            but returned values are the actual values from array
    */

    const array = [{ 'x': 2 }, { 'x': 1 }]
    const values = [{ 'x': 1 }]
    expect(_differenceBy(array, values, (value) => value.x)).toStrictEqual([{ 'x': 2 }])
  })

  test('returns same array when no comparison criterion was generated', () => {
    const array = [{ 'x': 2 }, { 'x': 1 }]
    const values = [{ 'x': 1 }]
    expect(_differenceBy(array, values)).toStrictEqual(array)
    expect(_differenceBy(array, values, null)).toStrictEqual(array)
    expect(_differenceBy(array, values, undefined)).toStrictEqual(array)
  })

  test('returns empty array when no operation (noop) function is passed (maybe because it will generate criterion as ([undefined, undefined], [undefined]) )', () => {
    const array = [{ 'x': 2 }, { 'x': 1 }]
    const values = [{ 'x': 1 }]
    expect(_differenceBy(array, values, () => { })).toStrictEqual([])
  })

  test('returns empty array when some integer, boolean or string is passed as comparison generator', () => {
    const array = [{ 'x': 2 }, { 'x': 1 }]
    const values = [{ 'x': 1 }]

    expect(_differenceBy(array, values, 1)).toStrictEqual([])
    expect(_differenceBy(array, values, 0)).toStrictEqual([])
    expect(_differenceBy(array, values, false)).toStrictEqual([])
    expect(_differenceBy(array, values, true)).toStrictEqual([])
    expect(_differenceBy(array, values, NaN)).toStrictEqual([])
    expect(_differenceBy(array, values, 123)).toStrictEqual([])
    expect(_differenceBy(array, values, '123')).toStrictEqual([])
  })

  test('returns empty array when passed array is not an array or is empty', () => {
    // Note: 'x' is shorthand for _property('x') in lodash
    const values = [{ 'x': 1 }]
    expect(_differenceBy(null, values, 'x')).toStrictEqual([])
    expect(_differenceBy(undefined, values, 'x')).toStrictEqual([])
    expect(_differenceBy([], values, 'x')).toStrictEqual([])
    expect(_differenceBy('anuj', values, 'x')).toStrictEqual([])
  })

  test('returns same array when values is not an array or an empty array ', () => {
    const array = [{ 'x': 2 }, { 'x': 1 }]
    expect(_differenceBy(array, null, 'x')).toStrictEqual(array)
    expect(_differenceBy(array, undefined, 'x')).toStrictEqual(array)
    expect(_differenceBy(array, 1, 'x')).toStrictEqual(array)
    expect(_differenceBy(array, true, 'x')).toStrictEqual(array)
    expect(_differenceBy(array, 'qwerty', 'x')).toStrictEqual(array)
    expect(_differenceBy(array, [], 'x')).toStrictEqual(array)
  })

})